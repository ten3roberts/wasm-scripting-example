[package]
name = "scripting-example"
version = "0.1.0"
edition = "2021"

[lib]
crate-type = ["cdylib", "rlib"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[dependencies]
wasm_component_layer = { path = "./wasm_component_layer" }

tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }
wasm-bindgen = "0.2"
anyhow = "1.0"
tracing-error = "0.2"
wasm-bindgen-test = "0.3"

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm_runtime_layer = { path = "./wasm_runtime_layer", features = ["backend_web", "tracing"] }
tracing-web = "0.1"
console_error_panic_hook = "0.1"

[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
wasm_runtime_layer = { path = "./wasm_runtime_layer", features = ["backend_wasmi", "backend_wasmtime"] }
wasmi = "0.31"
wasmtime = { version = ">=0.0.0", features = ["component-model"] }
tracing-tree = "0.3"

[patch.crates-io]
wasm_runtime_layer = { path = "./wasm_runtime_layer" }
wasm_component_layer = { path = "./wasm_component_layer" }

[workspace]
members = [
    "guest",
    "wasm_runtime_layer",
    "wasm_component_layer",
    "./scripting-tests/single_component",
    "./scripting-tests"
]

[package.metadata.wasm-pack.profile.dev]
# Should `wasm-opt` be used to further optimize the wasm binary generated after
# the Rust compiler has finished? Using `wasm-opt` can often further decrease
# binary size or do clever tricks that haven't made their way into LLVM yet.
#
# Configuration is set to `false` by default for the dev profile, but it can
# be set to an array of strings which are explicit arguments to pass to
# `wasm-opt`. For example `['-Os']` would optimize for size while `['-O4']`
# would execute very expensive optimizations passes
wasm-opt = false
